<?xml version="1.0" ?>
<project xmlns="http://maven.apache.org/POM/4.0.0" 
		 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
		 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>io.github.levitics</groupId>
		<artifactId>base-pom</artifactId>
		<version>1.0-SNAPSHOT</version>
		<relativePath>../base-pom</relativePath>
	</parent>

	<artifactId>closedsource-pom</artifactId>
	<packaging>pom</packaging>

	<name>${corporateName} Closed Source POM</name>

	<properties>
		<distribution.snapshotRepositoryName>${corporate} private Development Repository Snapshots</distribution.snapshotRepositoryName>
		<distribution.snapshotRepositoryId>private-snapshot</distribution.snapshotRepositoryId>
		<distribution.snapshotRepositoryUrl>https://maven.${corporate}/private-snapshot</distribution.snapshotRepositoryUrl>

		<distribution.releaseRepositoryName>${corporate} Public Release Distribution Repository</distribution.releaseRepositoryName>
		<distribution.releaseRepositoryId>m2-repository</distribution.releaseRepositoryId>
		<distribution.releaseRepositoryUrl>https://maven.${corporate}/Public</distribution.releaseRepositoryUrl>
	</properties>

	<distributionManagement>
		<repository>
			<id>${distribution.releaseRepositoryId}</id>
			<url>${distribution.releaseRepositoryUrl}</url>
			<name>${distribution.releaseRepositoryName}</name> 
		</repository>
		<snapshotRepository>
			<id>${distribution.snapshotRepositoryId}</id>
			<url>${distribution.snapshotRepositoryUrl}</url>
			<name>${distribution.snapshotRepositoryName}</name>   
		</snapshotRepository>
	</distributionManagement>

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-deploy-plugin</artifactId>
				<inherited>false</inherited>
				<configuration>
					<altDeploymentRepository>
                        atlassian-m2-snapshot-repository::default::https://maven.atlassian.com/public-snapshot
					</altDeploymentRepository>
				</configuration>
			</plugin>
		</plugins>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>com.atlassian.maven.plugins</groupId>
					<artifactId>maven-source-routes-plugin</artifactId>
					<version>1.7</version>
					<configuration>
						<distributionManagement>
							<repository>
								<id>atlassian-private</id>
								<name>Atlassian Private Repository</name>
								<url>https://maven.atlassian.com/private</url>
							</repository>
							<snapshotRepository>
								<id>atlassian-private-snapshot</id>
								<name>Atlassian Private Snapshot Repository</name>
								<url>https://maven.atlassian.com/private-snapshot</url>
							</snapshotRepository>
						</distributionManagement>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<profile>
			<id>release</id>
			<build>
				<plugins>
					<plugin>
						<artifactId>maven-deploy-plugin</artifactId>
						<inherited>false</inherited>
						<configuration>
							<altDeploymentRepository>
                                atlassian-m2-repository::default::https://maven.atlassian.com/public
							</altDeploymentRepository>
						</configuration>
					</plugin>
					<plugin>
						<artifactId>maven-source-plugin</artifactId>
						<executions>
							<execution>
								<id>attach-sources</id>
								<goals>
									<goal>jar</goal>
								</goals>
								<configuration>
									<attach>false</attach>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>com.atlassian.maven.plugins</groupId>
						<artifactId>maven-source-routes-plugin</artifactId>
						<executions>
							<execution>
								<id>create-sources</id>
								<phase>deploy</phase>
								<goals>
									<goal>route</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>nexusStaging</id>
			<activation>
				<property>
					<name>!skip.nexus.staging</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.sonatype.plugins</groupId>
						<artifactId>nexus-staging-maven-plugin</artifactId>
						<extensions>true</extensions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<!--

 -->
		<profile>
			<!--
            The profile deploys all artifacts to oss.sonatype.org
            repository (if you're registered there). It also skips
            default deployment plugin.
            @see http://www.jcabi.com/jcabi-parent/profile-sonatype.html
            -->
			<id>sonatype</id>
			<build>
				<pluginManagement>
					<plugins>
						<plugin>
							<artifactId>maven-deploy-plugin</artifactId>
							<configuration>
								<skip>true</skip>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
				<plugins>
					<plugin>
						<artifactId>maven-source-plugin</artifactId>
						<executions>
							<execution>
								<id>jcabi-sources</id>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<!--
                        Generate -javadoc.jar artifact, required by Maven Central.
                        -->
						<artifactId>maven-javadoc-plugin</artifactId>
						<executions>
							<execution>
								<id>jcabi-javadoc</id>
								<phase>package</phase>
								<goals>
									<goal>jar</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<!-- @see http://www.sonatype.com/books/nexus-book/reference/staging-sect-deployment.html -->
						<groupId>org.sonatype.plugins</groupId>
						<artifactId>nexus-staging-maven-plugin</artifactId>
						<version>1.6.5</version>
						<extensions>true</extensions>
						<configuration>
							<serverId>oss.sonatype.org</serverId>
							<nexusUrl>https://oss.sonatype.org/</nexusUrl>
							<description>${project.version}</description>
						</configuration>
						<executions>
							<execution>
								<id>jcabi-deploy-to-sonatype</id>
								<phase>deploy</phase>
								<goals>
									<goal>deploy</goal>
									<goal>release</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!--
            Static quality analysis with Qulice and other tools.
            This profile is supposed to be activated in continuous
            integration environment, right before the final approval
            of the build. It runs a number of static code analysis
            tools to validate and approve the quality of source
            code and the SCM repository.
            @see http://www.jcabi.com/jcabi-parent/profile-qulice.html
            -->
			<id>qulice</id>
			<build>
				<plugins>
					<plugin>
						<!--
                        Qulice-maven-plugin is a compound static analysis
                        tool that aggregates Checkstyle, PMD, FindBugs,
                        CodeNarc (for Groovy code) and a few other analyzers.
                        Qulice also configures them correctly to enable the
                        most important rules.
                        @see http://www.qulice.com/qulice-maven-plugin/
                        -->
						<groupId>com.qulice</groupId>
						<artifactId>qulice-maven-plugin</artifactId>
						<version>0.10</version>
						<executions>
							<execution>
								<id>jcabi-check</id>
								<phase>verify</phase>
								<goals>
									<goal>check</goal>
								</goals>
								<configuration>
									<license>file:${basedir}/LICENSE.txt</license>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!--
            The profile builds site for production environment.
            @see http://www.jcabi.com/jcabi-parent/profile-qulice.html
            -->
			<id>site</id>
			<build>
				<plugins>
					<plugin>
						<!--
                        Checks the quality of Maven project documentation
                        @see http://maven.apache.org/plugins/maven-docck-plugin/index.html
                        -->
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-docck-plugin</artifactId>
						<version>1.0</version>
						<executions>
							<execution>
								<id>jcabi-check</id>
								<!--
                                It doesn't work as expected:
                                https://jira.codehaus.org/browse/MDOCCK-27
                                -->
								<phase>never-verify</phase>
								<goals>
									<goal>check</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-site-plugin</artifactId>
						<version>3.4</version>
						<configuration>
							<generateSitemap>true</generateSitemap>
							<reportPlugins>
								<plugin>
									<artifactId>maven-project-info-reports-plugin</artifactId>
									<version>2.7</version>
									<configuration>
										<dependencyDetailsEnabled>false</dependencyDetailsEnabled>
										<dependencyLocationsEnabled>false</dependencyLocationsEnabled>
									</configuration>
									<reportSets>
										<reportSet>
											<reports>
												<report>cim</report>
												<report>dependencies</report>
												<report>issue-tracking</report>
												<report>license</report>
												<report>mailing-list</report>
												<report>plugins</report>
												<report>project-team</report>
												<report>scm</report>
												<report>summary</report>
											</reports>
										</reportSet>
									</reportSets>
								</plugin>
								<plugin>
									<artifactId>maven-jxr-plugin</artifactId>
									<version>2.4</version>
									<configuration>
										<aggregate>true</aggregate>
									</configuration>
								</plugin>
								<plugin>
									<artifactId>maven-surefire-report-plugin</artifactId>
									<version>2.17</version>
									<reportSets>
										<reportSet>
											<reports>
												<report>report-only</report>
											</reports>
										</reportSet>
									</reportSets>
								</plugin>
								<plugin>
									<!--
                                    Shows reports about recent versions of plugins and deps.
                                    @see http://mojo.codehaus.org/versions-maven-plugin/
                                    -->
									<groupId>org.codehaus.mojo</groupId>
									<artifactId>versions-maven-plugin</artifactId>
									<version>2.1</version>
									<reportSets>
										<reportSet>
											<reports>
												<report>dependency-updates-report</report>
												<report>plugin-updates-report</report>
											</reports>
										</reportSet>
									</reportSets>
								</plugin>
								<plugin>
									<!--
                                    API documentation builder. It will produce documentation
                                    which is then to be used in site:site. It will be
                                    located at target/site/apidocs.
                                    -->
									<artifactId>maven-javadoc-plugin</artifactId>
									<configuration>
										<failOnError>true</failOnError>
										<quiet>true</quiet>
										<links>
											<link>http://download.oracle.com/javaee/6/api/</link>
											<link>http://sonatype.github.com/sonatype-aether/apidocs/</link>
											<link>http://hamcrest.org/JavaHamcrest/javadoc/1.3/</link>
											<link>http://docs.mockito.googlecode.com/hg/latest/</link>
											<link>http://www.h2database.com/javadoc/</link>
											<link>http://jolbox.com/bonecp/downloads/site/apidocs/</link>
										</links>
										<detectLinks>true</detectLinks>
										<tags>
											<!--
                                            Here we instruct plugin to use custom tag
                                            @link http://maven.apache.org/plugins/maven-javadoc-plugin/examples/tag-configuration.html
                                            -->
											<tag>
												<name>todo</name>
												<placement>a</placement>
												<head>To do:</head>
											</tag>
											<tag>
												<name>checkstyle</name>
												<placement>a</placement>
												<head>Suppressed Checkstyle violations:</head>
											</tag>
										</tags>
									</configuration>
									<reportSets>
										<reportSet>
											<id>jcabi-versioned-html</id>
											<reports>
												<report>javadoc</report>
											</reports>
											<configuration>
												<windowtitle>${project.name} ${project.version} API</windowtitle>
												<doctitle>${project.name} ${project.version} API</doctitle>
												<sourcepath>src/main/java</sourcepath>
												<destDir>apidocs-${project.version}</destDir>
											</configuration>
										</reportSet>
										<reportSet>
											<id>jcabi-versioned-test</id>
											<reports>
												<report>test-javadoc</report>
											</reports>
											<configuration>
												<testWindowtitle>${project.name} ${project.version} Mock API</testWindowtitle>
												<testDoctitle>${project.name} ${project.version} Mock API</testDoctitle>
												<sourcepath>src/mock/java</sourcepath>
												<destDir>testapidocs-${project.version}</destDir>
											</configuration>
										</reportSet>
									</reportSets>
								</plugin>
								<plugin>
									<groupId>org.codehaus.mojo</groupId>
									<artifactId>cobertura-maven-plugin</artifactId>
									<!-- This is the latest version that works. Version 2.6
                                    causes problems in combination with AJC compilation -->
									<version>2.5.2</version>
								</plugin>
								<plugin>
									<artifactId>maven-plugin-plugin</artifactId>
									<version>3.3</version>
								</plugin>
							</reportPlugins>
						</configuration>
						<executions>
							<execution>
								<id>jcabi-attach-descriptor</id>
								<goals>
									<goal>attach-descriptor</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!--
            Compile Clojure sources from src/main/clojure and src/test/clojure
            directories.
            -->
			<id>clojure</id>
			<activation>
				<file>
					<exists>${basedir}/src/main/clojure</exists>
				</file>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>com.theoryinpractise</groupId>
						<artifactId>clojure-maven-plugin</artifactId>
						<version>1.3.23</version>
						<configuration>
							<warnOnReflection>true</warnOnReflection>
							<vmargs>-Dlog4j.configuration=file:${basedir}/src/test/resources/log4j.properties</vmargs>
						</configuration>
						<executions>
							<execution>
								<id>jcabi-clojure</id>
								<goals>
									<goal>add-source</goal>
									<goal>add-test-source</goal>
									<goal>compile</goal>
									<goal>test</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
        <profile>
            <!--
            Enable LOG4J for testing and SLF4J binding. The profile is activated
            when you have src/test/resources/log4j.properties. When this file
            is present it means that you want your SLF4J logs to be sent to
            LOG4J during testing time. The profile will add required bindings
            to the classpath.
            -->
            <id>jcabi-slf4j</id>
            <activation>
                <file>
                    <exists>${basedir}/src/test/resources/log4j.properties</exists>
                </file>
            </activation>
            <dependencies>
                <dependency>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                    <scope>test</scope>
                </dependency>
                <dependency>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                    <scope>test</scope>
                </dependency>
            </dependencies>
        </profile>
        <profile>
            <!--
            For every Java package it creates a VERSION.txt file in
            "src/main/resources" directory. This is done in order to help
            with identification of currently used version of a package.
            -->
            <id>versionalize-packages</id>
            <activation>
                <file>
                    <exists>${basedir}/src/main/java</exists>
                </file>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>com.jcabi</groupId>
                        <artifactId>jcabi-maven-plugin</artifactId>
                        <version>0.9.3</version>
                        <executions>
                            <execution>
                                <id>versionalize-packages</id>
                                <goals>
                                    <goal>versionalize</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>		
	</profiles>
</project>
